package sorting2014;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Calendar;

@SuppressWarnings({ "rawtypes" })
public class SortDemo {
static String current;
	public Comparable[] load(String fileName) {
		BufferedReader reader = null;
		Comparable[] items = null;
		int size = 0;
		try {
			reader = new BufferedReader(new FileReader(fileName));
		} catch (FileNotFoundException e) {
			System.out.println("No such file -> " + fileName);
			System.exit(0);
		}

		try {
			while (reader.readLine() != null) {
				size++;
			}

			reader = new BufferedReader(new FileReader(fileName));
			items = new Comparable[size];
			for (int i = 0; i < size; i++) {
				items[i] = reader.readLine();
			}
		} catch (Exception e) {
		}
		try {
			reader.close();
		} catch (Exception e) {
		}
		return items;
	}

	public long sort(String type, Comparable[] items) {
		long start = 0, finish = 0, timeTaken = 0;

		Sorter s = SortFactory.getSorter(type);
		if (s != null) {
			start = Calendar.getInstance().getTimeInMillis();
			s.sort(items, 0);
			finish = Calendar.getInstance().getTimeInMillis();
			timeTaken = finish - start;
		} else {
			System.out.println("Bad sort name.");
		}
		return timeTaken;
	}

	public void outputToFile(String data, String destination) {
		try {
			PrintWriter pw = new PrintWriter(destination);
			// "/home/evdjoint/Programming/JAVA/CS211/junk");
			pw.write(data);
			pw.close();

		} catch (FileNotFoundException e) {

			e.printStackTrace();
		}
	}

	public String arrayToString(Comparable[] items) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < items.length; i++) {
			sb.append(items[i].toString());
			sb.append('\n');
		}
		return sb.toString();
	}

	public static void main(String[] args) {
		SortDemo sd = new SortDemo();
		String data = sd.testAll(1);
		 System.out.println(data);
		 current = "Unsorted";
		// current = "Sorted";
		// current = "Reverse";
	 	String currentFile = "/home/evdjoint/Programming/JAVA/CS211/"+current;

		 sd.outputToFile(data, currentFile);

	}

	public String testAll(int howManyTimes) {

		String[] sorts = {
		// "RadixSort",
		//"QuickSort",
		//"ReverseSorter"
		// "MergeSort",
		// "ShellSort",
		// "InsertionSort",
		  "SelectionSort",
		// "BubbleSort",
		// "ImprovedBubbleSort"
		};

		String[] files = { "test3.dat", "test3a.dat", "test3b.dat",
				 "test4.dat", "test4a.dat", "test4b.dat",// "test5.dat",
				//"test5a.dat", "test5b.dat", "test6.dat", "test6a.dat",
			//	"test6b.dat", 
				//"test7.dat",
		// "test7a.dat", "test7b.dat"
		};

		StringBuilder sb = new StringBuilder();
		for (int j = 0; j < sorts.length; j++) {

			sb.append('\n');
			sb.append(sorts[j]);
			sb.append('\n');
			sb.append("Input amount,");
			sb.append("Time to sort");
			long time = 0;

			for (int i = 0; i < files.length; i++) {
				Comparable[] items = null;
				for (int o = 0; o < howManyTimes; o++) {
					items = this.load(current+"/"+files[i]);
					time += this.sort("sorting2014." + sorts[j], items);
					 
					 
				}

				sb.append('\n');
				sb.append(items.length);
				sb.append(',');
				double averageTime = (time / howManyTimes) / 1000.0;
				sb.append(averageTime);

			}
		}
		return sb.toString();

	}
}